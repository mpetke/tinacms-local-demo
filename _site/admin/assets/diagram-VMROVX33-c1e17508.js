import{s as re}from"./chunk-SKB7J2MH-41a60cf4.js";import{s as oe,r as ie,H as ce,I as de,u as pe,v as he,_ as u,$ as Q,Z as U,aM as ue,Q as fe,Y as me,D as B,a3 as ye,E as ge,aN as A,a7 as I,aO as Se,aP as xe,aQ as L,C as _}from"./index-fa1ba195.js";import{p as be}from"./chunk-353BL4L5-b3a5884b.js";import{p as ve}from"./mermaid-parser.core-0cb3ff54.js";var M,Z=(M=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=oe,this.getAccTitle=ie,this.setDiagramTitle=ce,this.getDiagramTitle=de,this.getAccDescription=pe,this.setAccDescription=he}getNodes(){return this.nodes}getConfig(){const a=me,o=Q();return U({...a.treemap,...o.treemap??{}})}addNode(a,o){this.nodes.push(a),this.levels.set(a,o),o===0&&(this.outerNodes.push(a),this.root??(this.root=a))}getRoot(){return{name:"",children:this.outerNodes}}addClass(a,o){const s=this.classes.get(a)??{id:a,styles:[],textStyles:[]},c=o.replace(/\\,/g,"§§§").replace(/,/g,";").replace(/§§§/g,",").split(";");c&&c.forEach(n=>{ue(n)&&(s!=null&&s.textStyles?s.textStyles.push(n):s.textStyles=[n]),s!=null&&s.styles?s.styles.push(n):s.styles=[n]}),this.classes.set(a,s)}getClasses(){return this.classes}getStylesForClass(a){var o;return((o=this.classes.get(a))==null?void 0:o.styles)??[]}clear(){fe(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}},u(M,"TreeMapDB"),M);function q(d){if(!d.length)return[];const a=[],o=[];return d.forEach(s=>{const c={name:s.name,children:s.type==="Leaf"?void 0:[]};for(c.classSelector=s==null?void 0:s.classSelector,s!=null&&s.cssCompiledStyles&&(c.cssCompiledStyles=[s.cssCompiledStyles]),s.type==="Leaf"&&s.value!==void 0&&(c.value=s.value);o.length>0&&o[o.length-1].level>=s.level;)o.pop();if(o.length===0)a.push(c);else{const n=o[o.length-1].node;n.children?n.children.push(c):n.children=[c]}s.type!=="Leaf"&&o.push({node:c,level:s.level})}),a}u(q,"buildHierarchy");var Ce=u((d,a)=>{be(d,a);const o=[];for(const n of d.TreemapRows??[])n.$type==="ClassDefStatement"&&a.addClass(n.className??"",n.styleText??"");for(const n of d.TreemapRows??[]){const p=n.item;if(!p)continue;const y=n.indent?parseInt(n.indent):0,V=we(p),l=p.classSelector?a.getStylesForClass(p.classSelector):[],F=l.length>0?l.join(";"):void 0,v={level:y,name:V,type:p.$type,value:p.value,classSelector:p.classSelector,cssCompiledStyles:F};o.push(v)}const s=q(o),c=u((n,p)=>{for(const y of n)a.addNode(y,p),y.children&&y.children.length>0&&c(y.children,p+1)},"addNodesRecursively");c(s,0)},"populate"),we=u(d=>d.name?String(d.name):"","getItemName"),J={parser:{yy:void 0},parse:u(async d=>{var a;try{const s=await ve("treemap",d);B.debug("Treemap AST:",s);const c=(a=J.parser)==null?void 0:a.yy;if(!(c instanceof Z))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");Ce(s,c)}catch(o){throw B.error("Error parsing treemap:",o),o}},"parse")},Te=10,$=10,D=25,Le=u((d,a,o,s)=>{const c=s.db,n=c.getConfig(),p=n.padding??Te,y=c.getDiagramTitle(),V=c.getRoot(),{themeVariables:l}=Q();if(!V)return;const F=y?30:0,v=ye(a),O=n.nodeWidth?n.nodeWidth*$:960,G=n.nodeHeight?n.nodeHeight*$:500,H=O,Y=G+F;v.attr("viewBox",`0 0 ${H} ${Y}`),ge(v,Y,H,n.useMaxWidth);let C;try{const e=n.valueFormat||",";if(e==="$0,0")C=u(t=>"$"+A(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const t=/\.\d+/.exec(e),r=t?t[0]:"";C=u(f=>"$"+A(","+r)(f),"valueFormat")}else if(e.startsWith("$")){const t=e.substring(1);C=u(r=>"$"+A(t||"")(r),"valueFormat")}else C=A(e)}catch(e){B.error("Error creating format function:",e),C=A(",")}const N=I().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),K=I().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),E=I().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);y&&v.append("text").attr("x",H/2).attr("y",F/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(y);const X=v.append("g").attr("transform",`translate(0, ${F})`).attr("class","treemapContainer"),ee=Se(V).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),j=xe().size([O,G]).paddingTop(e=>e.children&&e.children.length>0?D+$:0).paddingInner(p).paddingLeft(e=>e.children&&e.children.length>0?$:0).paddingRight(e=>e.children&&e.children.length>0?$:0).paddingBottom(e=>e.children&&e.children.length>0?$:0).round(!0)(ee),te=j.descendants().filter(e=>e.children&&e.children.length>0),z=X.selectAll(".treemapSection").data(te).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);z.append("rect").attr("width",e=>e.x1-e.x0).attr("height",D).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>e.depth===0?"display: none;":""),z.append("clipPath").attr("id",(e,t)=>`clip-section-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",D),z.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>N(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>K(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(e.depth===0)return"display: none;";const t=L({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),z.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",D/2).attr("dominant-baseline","middle").text(e=>e.depth===0?"":e.data.name).attr("font-weight","bold").attr("style",e=>{if(e.depth===0)return"display: none;";const t="dominant-baseline: middle; font-size: 12px; fill:"+E(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",r=L({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")}).each(function(e){if(e.depth===0)return;const t=_(this),r=e.data.name;t.text(r);const f=e.x1-e.x0,g=6;let S;if(n.showValues!==!1&&e.value){const h=f-10,m=30,b=10;S=h-m-b-g}else S=f-g-6;const x=Math.max(15,S),i=t.node();if(i.getComputedTextLength()>x){const h="...";let m=r;for(;m.length>0;){if(m=r.substring(0,m.length-1),m.length===0){t.text(h),i.getComputedTextLength()>x&&t.text("");break}if(t.text(m+h),i.getComputedTextLength()<=x)break}}}),n.showValues!==!1&&z.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",D/2).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?C(e.value):"").attr("font-style","italic").attr("style",e=>{if(e.depth===0)return"display: none;";const t="text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+E(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",r=L({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")});const ae=j.leaves(),W=X.selectAll(".treemapLeafGroup").data(ae).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);W.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?N(e.parent.data.name):N(e.data.name)).attr("style",e=>L({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?N(e.parent.data.name):N(e.data.name)).attr("stroke-width",3),W.append("clipPath").attr("id",(e,t)=>`clip-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),W.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>{const t="text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+E(e.data.name)+";",r=L({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")}).attr("clip-path",(e,t)=>`url(#clip-${a}-${t})`).text(e=>e.data.name).each(function(e){const t=_(this),r=e.x1-e.x0,f=e.y1-e.y0,g=t.node(),S=4,T=r-2*S,x=f-2*S;if(T<10||x<10){t.style("display","none");return}let i=parseInt(t.style("font-size"),10);const w=8,h=28,m=.6,b=6,k=2;for(;g.getComputedTextLength()>T&&i>w;)i--,t.style("font-size",`${i}px`);let P=Math.max(b,Math.min(h,Math.round(i*m))),R=i+k+P;for(;R>x&&i>w&&(i--,P=Math.max(b,Math.min(h,Math.round(i*m))),!(P<b&&i===w));)t.style("font-size",`${i}px`),R=i+k+P;t.style("font-size",`${i}px`),(g.getComputedTextLength()>T||i<w||x<i)&&t.style("display","none")}),n.showValues!==!1&&W.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>{const r="text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+E(t.data.name)+";",f=L({cssCompiledStyles:t.data.cssCompiledStyles});return r+f.labelStyles.replace("color:","fill:")}).attr("clip-path",(t,r)=>`url(#clip-${a}-${r})`).text(t=>t.value?C(t.value):"").each(function(t){const r=_(this),f=this.parentNode;if(!f){r.style("display","none");return}const g=_(f).select(".treemapLabel");if(g.empty()||g.style("display")==="none"){r.style("display","none");return}const S=parseFloat(g.style("font-size")),T=28,x=.6,i=6,w=2,h=Math.max(i,Math.min(T,Math.round(S*x)));r.style("font-size",`${h}px`);const b=(t.y1-t.y0)/2+S/2+w;r.attr("y",b);const k=t.x1-t.x0,se=t.y1-t.y0-4,ne=k-2*4;r.node().getComputedTextLength()>ne||b+h>se||h<i?r.style("display","none"):r.style("display",null)});const le=n.diagramPadding??8;re(v,le,"flowchart",(n==null?void 0:n.useMaxWidth)||!1)},"draw"),$e=u(function(d,a){return a.db.getClasses()},"getClasses"),Fe={draw:Le,getClasses:$e},Ne={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},ze=u(({treemap:d}={})=>{const a=U(Ne,d);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles"),ke=ze,We={parser:J,get db(){return new Z},renderer:Fe,styles:ke};export{We as diagram};
